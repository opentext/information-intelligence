{
	"info": {
		"_postman_id": "a574368a-d13f-422c-bd3b-f6281cf8ba8e",
		"name": "InfoIntel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Get Tenant Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate token response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    pm.expect(pm.response.json().access_token).to.exist;\r",
									"})\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"tmp_tenant_access_token\", jsonData.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{app_confclient_id}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{app_confclient_secret}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{api_host}}/tenants/{{tenant_id}}/oauth2/token",
							"protocol": "https",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"tenants",
								"{{tenant_id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Version",
			"item": [
				{
					"name": "version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate version response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    // let's not fail at each version upgrade\r",
									"    pm.expect(jsonBody.projectVersion).to.not.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{infointel_url}}/v1/version",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"version"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Classify API",
			"item": [
				{
					"name": "classify-doc-psi-PerformanceRecords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk classification of doc (Performance records)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);;\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskClassification.result.psi;\r",
									"    pm.expect(riskResult.some(element=>(element.riskName == \"Performance records\")));\r",
									"    for (let risk of riskResult) {\r",
									"        if (risk.riskName == \"Performance records\") {\r",
									"            pm.expect(risk.riskLevel).to.equal(\"medium\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Performance Records.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/classify",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "classify-doc-pii-PN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk classification of doc (PN)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);;\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskClassification.result.pii;\r",
									"    pm.expect(riskResult.some(element=>(element.riskName == \"PN\")));\r",
									"    for (let risk of riskResult) {\r",
									"        if (risk.riskName == \"PN\") {\r",
									"            pm.expect(risk.frequency).to.be.above(1);\r",
									"            pm.expect(risk.riskLevel).to.equal(\"low\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Names.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/classify",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "classify-doc-pii-DriversLicence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk classification of doc (DriversLicence)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);;\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskClassification.result.pii;\r",
									"    pm.expect(riskResult.some(element=>(element.riskName == \"DriversLicence\")));\r",
									"    for (let risk of riskResult) {\r",
									"        if (risk.riskName == \"DriversLicence\") {\r",
									"            pm.expect(risk.frequency).to.be.above(1);\r",
									"            pm.expect(risk.riskLevel).to.equal(\"high\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Driving License.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/classify",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "classify-image-jpeg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk classification of image (JPEG)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskClassification.result.image;\r",
									"    pm.expect(riskResult.some(element=>(element.riskName == \"Alcohol\")));\r",
									"    for (let risk of riskResult) {\r",
									"        if (risk.riskName == \"Alcohol\") {\r",
									"            pm.expect(risk.riskLevel).to.equal(\"high\");\r",
									"        }\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Alcohol.jpeg"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/classify",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"classify"
							]
						}
					},
					"response": []
				},
				{
					"name": "classify-video-Alcohol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk classification of video (Alcohol)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskClassification.result.video;\r",
									"    pm.expect(riskResult.some(element=>(element.riskName == \"Alcohol\")));\r",
									"    let risk = riskResult.find(element=>(element.riskName == \"Alcohol\"));\r",
									"    pm.expect(risk.riskLevel).to.equal(\"high\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Alcohol.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/classify",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"classify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Detect API",
			"item": [
				{
					"name": "detect-action-protection-doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of doc file protection', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.protection;\r",
									"    pm.expect(riskResult.result.isProtected).to.be.false;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Address.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=protection",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "protection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detect-action-protection-image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of image file protection', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.protection;\r",
									"    pm.expect(riskResult.result.isProtected).to.be.false;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Extremism.tif"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=protection",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "protection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detect-action-protection-video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of video file protection', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.protection;\r",
									"    pm.expect(riskResult.result.isProtected).to.be.false;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapons.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=protection",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "protection"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detect-action-language-doc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of doc file language', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.language;\r",
									"    pm.expect(riskResult.result.name ).to.equal(\"en\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Address.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=language",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "language"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detect-action-language-image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of image file language', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.language;\r",
									"    pm.expect(riskResult.result).to.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Extremism.tif"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=language",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "language"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "detect-action-language-video",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate detection of video file language', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.riskDetection.results.language;\r",
									"    pm.expect(riskResult.result).to.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapons.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/detect?action=language",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"detect"
							],
							"query": [
								{
									"key": "action",
									"value": "language"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extract API",
			"item": [
				{
					"name": "extract-video-action-metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate metadata extraction from video', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"metadata_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result['Content-Length']).to.equal(\"5792410\");\r",
									"    pm.expect(actionResult.result['Content-Type']).to.equal(\"video/mp4\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapons.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=metadata",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "metadata"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-image-action-metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate metadata extraction from image', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"metadata_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result['Content-Length']).to.equal(\"118660\");\r",
									"    pm.expect(actionResult.result['Content-Type']).to.equal(\"image/gif\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapon.gif"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=metadata",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "metadata"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-default-metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate default metadata extraction', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"metadata_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result['Content-Length']).to.equal(\"29184\");\r",
									"    pm.expect(actionResult.result['Content-Type']).to.equal(\"application/msword\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Address.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-doc-action-metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate metadata extraction from DOC', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"metadata_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result['Content-Length']).to.equal(\"29184\");\r",
									"    pm.expect(actionResult.result['Content-Type']).to.equal(\"application/msword\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Address.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=metadata",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "metadata"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-video-action-text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate text extraction from video', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"text_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result).to.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapons.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=text",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-image-action-text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate text extraction from image', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"text_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result).to.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Weapon.gif"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=text",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-doc-action-text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate text extraction from DOC', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"text_extraction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result).to.contain(\"Bryar Pitts\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Address.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=text",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-action-ocr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate OCR response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"idol-ocr\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result.results).to.contain(\"Passport\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Passport_ocr.jpg"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=ocr",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "ocr"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-action-audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate idol-stt response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"idol-stt\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result.results).to.contain(\"Olympus dictation management system\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Welcome.wav"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=audio",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "audio"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-action-pii",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate PII response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"idol-eduction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result.autnresponse.action).to.eql(\"EDUCEFROMTEXT\");\r",
									"    pm.expect(actionResult.result.autnresponse.responsedata.numhits).to.eql(\"2922\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "input_eduction.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=eduction&entities=pii",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "eduction"
								},
								{
									"key": "entities",
									"value": "pii"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "extract-action-phi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate PHI response', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const extractionResult = jsonBody.riskExtraction.results;\r",
									"    const actionResult = extractionResult[\"idol-eduction\"];\r",
									"    pm.expect(actionResult.status.message).to.equal(\"SUCCESS\");\r",
									"    pm.expect(actionResult.result.autnresponse.action).to.eql(\"EDUCEFROMTEXT\");\r",
									"    pm.expect(actionResult.result.autnresponse.responsedata.numhits).to.eql(\"147\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "input_eduction.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/extract?action=eduction&entities=phi",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"extract"
							],
							"query": [
								{
									"key": "action",
									"value": "eduction"
								},
								{
									"key": "entities",
									"value": "phi"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Process API",
			"item": [
				{
					"name": "process-action-risk-extraction-doc-NER-DriversLicence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from doc (NER - DriversLicence)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    const nFinderResult = tmeResult.result.results.nfinder[0];\r",
									"    pm.expect(nFinderResult).to.exist;\r",
									"    const riskResult = nFinderResult.nfExtract[0].extractedTerm;\r",
									"    pm.expect(riskResult.some(element=>(element.cartridgeID == \"DriversLicence\")));\r",
									"    let risk = riskResult.find(element=>(element.cartridgeID == \"DriversLicence\"));\r",
									"    pm.expect(risk.frequency).to.be.at.least(1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Driving License.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-doc-NER-PN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from doc (NER - PN)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    const nFinderResult = tmeResult.result.results.nfinder[0];\r",
									"    pm.expect(nFinderResult).to.exist;\r",
									"    const riskResult = nFinderResult.nfExtract[0].extractedTerm;\r",
									"    pm.expect(riskResult.some(element=>(element.cartridgeID == \"PN\")));\r",
									"    let risk = riskResult.find(element=>(element.cartridgeID == \"PN\"));\r",
									"    pm.expect(risk.frequency).to.be.at.least(1);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Names.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-doc-TC-PerformanceRecords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from doc (TC - Performance Records)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    const nCategorizerResult = tmeResult.result.results.ncategorizer[0];\r",
									"    pm.expect(nCategorizerResult).to.exist;\r",
									"    const kbResult = nCategorizerResult.knowledgeBase;\r",
									"    kbResult.some(kb=>(function(){\r",
									"        let categories = kb.categories.category;\r",
									"        pm.expect(categories.some(category=>(category.name==\"Performance records\")));\r",
									"        let category = categories.find(category=>(category.name==\"Performance records\"));\r",
									"        pm.expect(category.weight).to.be.at.least(75);\r",
									"        }));\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Performance Records.doc"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-pdf-NER-Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from PDF (NER - Username Password)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    const nFinderResult = tmeResult.result.results.nfinder[0];\r",
									"    pm.expect(nFinderResult).to.exist;\r",
									"    const terms = nFinderResult.nfExtract[0].extractedTerm;\r",
									"    pm.expect(terms.some(element=>(element.cartridgeID == \"Username\")));\r",
									"    let term = terms.find(element=>(element.cartridgeID == \"Username\"));\r",
									"    pm.expect(term.frequency).to.be.above(0);\r",
									"    pm.expect(terms.some(element=>(element.cartridgeID == \"Password\")));\r",
									"    term = terms.find(element=>(element.cartridgeID == \"Password\"));\r",
									"    pm.expect(term.frequency).to.be.above(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Username and Passwords.pdf"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-pdf-NER-URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from PDF (NER - URL)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    const nFinderResult = tmeResult.result.results.nfinder[0];\r",
									"    pm.expect(nFinderResult).to.exist;\r",
									"    const terms = nFinderResult.nfExtract[0].extractedTerm;\r",
									"    pm.expect(terms.some(element=>(element.cartridgeID == \"URL\")));\r",
									"    let term = terms.find(element=>(element.cartridgeID == \"URL\"));\r",
									"    pm.expect(term.frequency).to.be.above(0);\r",
									"    pm.expect(terms.some(element=>(element.cartridgeID == \"ShortURL\")));\r",
									"    term = terms.find(element=>(element.cartridgeID == \"ShortURL\"));\r",
									"    pm.expect(term.frequency).to.be.above(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Short URL.pdf"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-pdf-unsupported-lang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from PDF (TC - Disciplinary)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const tmeResult = jsonBody.results.tme;\r",
									"    pm.expect(tmeResult).to.exist;\r",
									"    pm.expect(tmeResult.status.message).to.equal(\"UNSUPPORTED\");\r",
									"    pm.expect(tmeResult.result).to.be.null;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "ForeignLang.pdf"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-image-jpg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from image (JPG)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.results.ia;\r",
									"    pm.expect(riskResult.result.result['Swim Underwear']).to.exist;\r",
									"    pm.expect(riskResult.result.result['Swim Underwear']).to.be.above(75);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Swim.jpg"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-image-jpg-Gore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from image (JPG - Gore)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.results.ia;\r",
									"    pm.expect(riskResult.result.result.Gore).to.exist;\r",
									"    pm.expect(riskResult.result.result.Gore).to.be.above(75);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Gore.jpg"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "process-action-risk-extraction-video-alcohol",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Validate risk extraction from video (weapons)', function () {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"    const jsonBody = pm.response.json();\r",
									"    const riskResult = jsonBody.results.va;\r",
									"    pm.expect(riskResult.result.result.Alcohol).to.exist;\r",
									"    pm.expect(riskResult.result.result.Alcohol).to.be.above(75);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-profile-id",
								"value": "{{profile-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "File",
									"type": "file",
									"src": "Alcohol.mp4"
								}
							]
						},
						"url": {
							"raw": "{{infointel_url}}/v1/process?action=risk-extraction",
							"host": [
								"{{infointel_url}}"
							],
							"path": [
								"v1",
								"process"
							],
							"query": [
								{
									"key": "action",
									"value": "risk-extraction"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{tmp_tenant_access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}